# https://symfony.com/doc/current/best_practices.html#use-parameters-for-application-configuration
parameters:
    main_domain: '%env(resolve:APP_MAIN_DOMAIN)%'
    main_url: '%env(resolve:APP_MAIN_DOMAIN)%'

    #directory for storing uploaded files
    app.upload_directory_path: '%kernel.project_dir%/var/uploads'
    app.tmp_directory_path: '%kernel.project_dir%/var/tmp'

    app.ocr_project_id: '%env(resolve:OCR_PROJECT_ID)%'
    app.ocr_google_credentials_path: '%env(resolve:OCR_GOOGLE_CREDENTIALS_PATH)%'
    app.ocr_yandex_token: '%env(resolve:OCR_YANDEX_TOKEN)%'

    app.elasticsearch.index_prefix: '%env(resolve:ELASTICSEARCH_INDEX_PREFIX)%'
    app.elasticsearch.connection_type: '%env(resolve:ELASTICSEARCH_CONNECTION_TYPE)%'
    app.elasticsearch.host: '%env(resolve:ELASTICSEARCH_HOST)%'
    app.elasticsearch.user: '%env(resolve:ELASTICSEARCH_USER)%'
    app.elasticsearch.password: '%env(resolve:ELASTICSEARCH_PASSWORD)%'
    app.elasticsearch.cloud_id: '%env(resolve:ELASTICSEARCH_CLOUD_ID)%'
    app.elasticsearch.api_key: '%env(resolve:ELASTICSEARCH_API_KEY)%'

    exceptions:
        App\Exception\CategoryNotFoundByIdException: {code: 404}
        App\Exception\FileAlreadyLoadedException: {code: 400}
        App\Exception\FileCorruptedException: {code: 400}

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        bind:
            $projectDir: '%kernel.project_dir%'
            $upload_directory_path: '%app.upload_directory_path%'
            $tmp_directory_path: '%app.tmp_directory_path%'

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    App\Service\OCR\OcrVisionInterface: '@App\Service\OCR\Google\DocumentOcrVision'

    App\Service\Pdf\Storage\CatalogStorageServiceInterface: '@App\Service\Pdf\Storage\GoogleCloud\CatalogStorageService'
    App\Service\Pdf\Storage\OcrResultStorageServiceInterface: '@App\Service\Pdf\Storage\GoogleCloud\OcrResultStorageService'

    App\Service\Elasticsearch:
        arguments:
            $elasticsearch_index_prefix: '%app.elasticsearch.index_prefix%'
            $elasticsearch_connection_type: '%app.elasticsearch.connection_type%'
            $elasticsearch_host: '%app.elasticsearch.host%'
            $elasticsearch_user: '%app.elasticsearch.user%'
            $elasticsearch_password: '%app.elasticsearch.password%'
            $elasticsearch_cloud_id: '%app.elasticsearch.cloud_id%'
            $elasticsearch_api_key: '%app.elasticsearch.api_key%'

    App\Service\Pdf\Storage\GoogleCloud\CatalogStorageService:
        arguments:
            $credentials_path: '%app.ocr_google_credentials_path%'

    App\Service\Pdf\Storage\GoogleCloud\OcrResultStorageService:
        arguments:
            $credentials_path: '%app.ocr_google_credentials_path%'

    App\Service\OCR\Google\ImageOcrVision:
        arguments:
            $credentials_path: '%app.ocr_google_credentials_path%'

    App\Service\OCR\Google\DocumentOcrVision:
        arguments:
            $credentials_path: '%app.ocr_google_credentials_path%'

    App\Service\ExceptionHandler\ExceptionMappingResolver:
        arguments: ['%exceptions%']

    App\EventListener\AllowAllCorsRequest:
        tags:
            - { name: kernel.event_listener, event: kernel.response }
    
    App\EventListener\ApiExceptionListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception, priority: 10 }